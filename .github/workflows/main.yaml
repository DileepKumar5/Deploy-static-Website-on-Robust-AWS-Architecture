name: Project CICD Pipeline.01

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository to Ubuntu Runner
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Installing Dependecies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --check "**/*.{html,css,js}"

      - name: Run HTML Hint
        run: npx htmlhint "**/*.html"

      - name: Run Eslint
        run: npx eslint js --ext .js

      - name: Run Stylelint
        run: npx stylelint "**/*.css"

  infrastructure-check:
    needs: code-review
    runs-on: ubuntu-latest
    steps:
        - name: Install and Configure AWS CLI
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: us-east-1

#         - name: Check if infrastructure exists 
#           id: infrastructure_exists
#           run: | 
#             if aws s3 ls s3://aliza-dileep-hasaan.com; then
#               echo "::set-output name=infrastructure_exists::true"
#             else
#               echo "::set-output name=infrastructure_exists::false"
#             fi
          
#         - name: Get CloudFront distribution ID
#           id: get_cf_id
#           run: |
#             CF_ID=$(terraform output -raw cloudfront_distribution_id)
#             echo "::set-output name=cf_id::$CF_ID"
#           working-directory: terraform

  infrastructure:
    needs: infrastructure-check
    environment: prod
    runs-on: ubuntu-latest
#     if: ${{ needs.infrastructure-check.outputs.infrastructure_exists == 'false' }}
    steps:
      - name: Checkout Repository to Ubuntu
        uses: actions/checkout@v3

      - name: Install and Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Format Terraform file
        run: terraform fmt -check
        working-directory: terraform

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        
      - name: Get CloudFront distribution ID
        id: get_cf_id
        run: echo "::set-output name=cf_id::$(terraform output -raw cloudfront_distribution_id)"
#         echo "CF_ID=$(terraform output -raw cloudfront_distribution_id)" >> ./my-env-file.txt
#           echo 'cf_id<<EOF' >> $GITHUB_OUTPUT
#           echo "$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
#           echo 'EOF' >> $GITHUB_OUTPUT
#         echo "::set-output name=cf_id::$(terraform output -raw cloudfront_distribution_id)"
#         echo "CF_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
#         CF_ID=$(terraform output -raw cloudfront_distribution_id)
#         echo "::set-output name=cf_id::$CF_ID"
        working-directory: ./terraform
        
      - name: Publish Artifact
        uses: actions/upload-artifact@v2
        with:
          name: environment-vars
          path: ./my-env-file.txt
        
      - name: Store CF_ID in environment variable
        run: echo "${{ steps.get_cf_id.outputs.cf_id }}"
#         echo "CF_ID=${{ steps.get_cf_id.outputs.cf_id }}" >> $GITHUB_ENV
#         echo "CF_ID=${{ steps.get_cf_id.outputs.cf_id }}"
        
      - name: Update AWS_DISTRIBUTION_ID secret
        env:
          REPO: ${{ github.repository }}
        run: |
          DISTRIBUTION_ID=${{ needs.infrastructure.outputs.cf_id }}
          TOKEN=${{ secrets.GH_TOKEN }}
          
          echo "Updating AWS_DISTRIBUTION_ID secret.."
          echo "$REPO"
          
          curl -X PATCH \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/secrets/AWS_DISTRIBUTION_ID" \
            -d "{\"encrypted_value\":\"$(echo -n $DISTRIBUTION_ID | openssl enc -base64 -A)\",\"key_id\":\"$(curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$REPO/actions/secrets/public-key" | jq -r .key_id)\"}"
          
          
  Deploy:
    needs: infrastructure
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository to Ubuntu
        uses: actions/checkout@v3

      - name: Install and Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1
#       - name: Download Artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: environment-vars

      - name: Upload files to S3
        run: aws s3 sync . s3://aliza-dileep-hasaan.com --delete
        
      - name: Print CF_ID
        run: echo ${{ needs.infrastructure.outputs.cf_id }}

      - name: Invalidate Cloudfront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ needs.infrastructure.outputs.cf_id }} --paths /
#         run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths /
      # - name: Retrieve CloudFront distribution ID
      #   id: get_distribution_id
      #   run: echo "::set-output name=distribution_id::$(terraform output -raw cloudfront_distribution_id)"
      # - name: Create Invalidation
      #   run: aws cloudfront create-invalidation --distribution-id ${{ needs.infrastructure.outputs.get_distribution_id }} --paths "/*"
#   Redeploy:
#     needs: infrastructure-check
#     environment: prod
#     runs-on: ubuntu-latest
# #     if: ${{ needs.infrastructure-check.outputs.infrastructure_exists == 'true' }}
#     steps:
#       - name: Checkout Repository to Ubuntu
#         uses: actions/checkout@v3

#       - name: Install and Configure AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#           aws-region: us-east-1

#       - name: Upload files to S3
#         run: aws s3 sync . s3://aliza-dileep-hasaan.com --delete

#       - name: Invalidate Cloudfront cache
#         run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths /
